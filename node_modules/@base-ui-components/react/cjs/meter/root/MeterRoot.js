"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MeterRoot = void 0;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _MeterRootContext = require("./MeterRootContext");
var _mergeProps = require("../../merge-props");
var _formatNumber = require("../../utils/formatNumber");
var _useLatestRef = require("../../utils/useLatestRef");
var _valueToPercent = require("../../utils/valueToPercent");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const EMPTY = {};
function formatValue(value, locale, format) {
  if (!format) {
    return (0, _formatNumber.formatNumber)(value / 100, locale, {
      style: 'percent'
    });
  }
  return (0, _formatNumber.formatNumber)(value, locale, format);
}
/**
 * Groups all parts of the meter and provides the value for screen readers.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Meter](https://base-ui.com/react/components/meter)
 */
const MeterRoot = exports.MeterRoot = /*#__PURE__*/React.forwardRef(function MeterRoot(props, forwardedRef) {
  const {
    format,
    getAriaValueText,
    locale,
    max = 100,
    min = 0,
    value,
    render,
    className,
    ...otherProps
  } = props;
  const formatOptionsRef = (0, _useLatestRef.useLatestRef)(format);
  const [labelId, setLabelId] = React.useState();
  const percentageValue = (0, _valueToPercent.valueToPercent)(value, min, max);
  const formattedValue = formatValue(value, locale, formatOptionsRef.current);
  const propGetter = React.useCallback((externalProps = {}) => {
    let ariaValuetext = `${percentageValue}%`;
    if (getAriaValueText) {
      ariaValuetext = getAriaValueText(formattedValue, value);
    } else if (format) {
      ariaValuetext = formattedValue;
    }
    return (0, _mergeProps.mergeProps)({
      'aria-labelledby': labelId,
      'aria-valuemax': max,
      'aria-valuemin': min,
      'aria-valuenow': percentageValue / 100,
      'aria-valuetext': ariaValuetext,
      role: 'meter'
    }, externalProps);
  }, [format, formattedValue, getAriaValueText, labelId, max, min, value, percentageValue]);
  const contextValue = React.useMemo(() => ({
    formattedValue,
    max,
    min,
    percentageValue,
    setLabelId,
    value
  }), [formattedValue, max, min, percentageValue, setLabelId, value]);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    propGetter,
    render: render ?? 'div',
    state: EMPTY,
    className,
    ref: forwardedRef,
    extraProps: otherProps
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MeterRootContext.MeterRootContext.Provider, {
    value: contextValue,
    children: renderElement()
  });
});
process.env.NODE_ENV !== "production" ? MeterRoot.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]),
  /**
   * Options to format the value.
   */
  format: _propTypes.default.shape({
    compactDisplay: _propTypes.default.oneOf(['long', 'short']),
    currency: _propTypes.default.string,
    currencyDisplay: _propTypes.default.oneOf(['code', 'name', 'narrowSymbol', 'symbol']),
    currencySign: _propTypes.default.oneOf(['accounting', 'standard']),
    localeMatcher: _propTypes.default.oneOf(['best fit', 'lookup']),
    maximumFractionDigits: _propTypes.default.number,
    maximumSignificantDigits: _propTypes.default.number,
    minimumFractionDigits: _propTypes.default.number,
    minimumIntegerDigits: _propTypes.default.number,
    minimumSignificantDigits: _propTypes.default.number,
    notation: _propTypes.default.oneOf(['compact', 'engineering', 'scientific', 'standard']),
    numberingSystem: _propTypes.default.string,
    signDisplay: _propTypes.default.oneOf(['always', 'auto', 'exceptZero', 'never']),
    style: _propTypes.default.oneOf(['currency', 'decimal', 'percent', 'unit']),
    unit: _propTypes.default.string,
    unitDisplay: _propTypes.default.oneOf(['long', 'narrow', 'short']),
    useGrouping: _propTypes.default.bool
  }),
  /**
   * A function that returns a string value that provides a human-readable text alternative for the current value of the meter.
   * @param {string} formattedValue The formatted value
   * @param {number} value The raw value
   * @returns {string}
   */
  getAriaValueText: _propTypes.default.func,
  /**
   * The locale used by `Intl.NumberFormat` when formatting the value.
   * Defaults to the user's runtime locale.
   */
  locale: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.shape({
    baseName: _propTypes.default.string.isRequired,
    calendar: _propTypes.default.string,
    caseFirst: _propTypes.default.oneOf(['false', 'lower', 'upper']),
    collation: _propTypes.default.string,
    hourCycle: _propTypes.default.oneOf(['h11', 'h12', 'h23', 'h24']),
    language: _propTypes.default.string.isRequired,
    maximize: _propTypes.default.func.isRequired,
    minimize: _propTypes.default.func.isRequired,
    numberingSystem: _propTypes.default.string,
    numeric: _propTypes.default.bool,
    region: _propTypes.default.string,
    script: _propTypes.default.string,
    toString: _propTypes.default.func.isRequired
  }), _propTypes.default.string]).isRequired), _propTypes.default.shape({
    baseName: _propTypes.default.string.isRequired,
    calendar: _propTypes.default.string,
    caseFirst: _propTypes.default.oneOf(['false', 'lower', 'upper']),
    collation: _propTypes.default.string,
    hourCycle: _propTypes.default.oneOf(['h11', 'h12', 'h23', 'h24']),
    language: _propTypes.default.string.isRequired,
    maximize: _propTypes.default.func.isRequired,
    minimize: _propTypes.default.func.isRequired,
    numberingSystem: _propTypes.default.string,
    numeric: _propTypes.default.bool,
    region: _propTypes.default.string,
    script: _propTypes.default.string,
    toString: _propTypes.default.func.isRequired
  }), _propTypes.default.string]),
  /**
   * The maximum value
   * @default 100
   */
  max: _propTypes.default.number,
  /**
   * The minimum value
   * @default 0
   */
  min: _propTypes.default.number,
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),
  /**
   * The current value.
   */
  value: _propTypes.default.number.isRequired
} : void 0;