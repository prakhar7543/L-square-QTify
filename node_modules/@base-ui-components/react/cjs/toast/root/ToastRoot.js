"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToastRoot = void 0;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _ToastRootContext = require("./ToastRootContext");
var _useForkRef = require("../../utils/useForkRef");
var _styleHookMapping = require("../../utils/styleHookMapping");
var _visuallyHidden = require("../../utils/visuallyHidden");
var _useToastRoot = require("./useToastRoot");
var _ToastProviderContext = require("../provider/ToastProviderContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const customStyleHookMapping = {
  ..._styleHookMapping.transitionStatusMapping,
  swipeDirection(value) {
    return value ? {
      'data-swipe-direction': value
    } : null;
  }
};

/**
 * Groups all parts of an individual toast.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Toast](https://base-ui.com/react/components/toast)
 */
const ToastRoot = exports.ToastRoot = /*#__PURE__*/React.forwardRef(function ToastRoot(props, forwardedRef) {
  const {
    toast,
    render,
    className,
    children,
    swipeDirection,
    ...other
  } = props;
  const {
    hovering,
    focused,
    hasDifferingHeights
  } = (0, _ToastProviderContext.useToastContext)();
  const toastRoot = (0, _useToastRoot.useToastRoot)({
    toast,
    swipeDirection: swipeDirection ?? ['down', 'right']
  });
  const mergedRef = (0, _useForkRef.useForkRef)(toastRoot.rootRef, forwardedRef);
  const state = React.useMemo(() => ({
    transitionStatus: toast.transitionStatus,
    expanded: hovering || focused || hasDifferingHeights,
    limited: toast.limited || false,
    type: toast.type,
    swiping: toastRoot.swiping,
    swipeDirection: toastRoot.swipeDirection
  }), [hovering, focused, hasDifferingHeights, toast.transitionStatus, toast.limited, toast.type, toastRoot.swiping, toastRoot.swipeDirection]);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    render: render ?? 'div',
    ref: mergedRef,
    className,
    state,
    customStyleHookMapping,
    propGetter: toastRoot.getRootProps,
    extraProps: {
      ...other,
      // Screen readers won't announce the text upon DOM insertion of the component.
      // We need to wait until the next tick to render the children so that screen
      // readers can announce the contents.
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
        children: [children, !focused && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          style: _visuallyHidden.visuallyHidden,
          ...(toast.priority === 'high' ? {
            role: 'alert',
            'aria-atomic': true
          } : {
            role: 'status',
            'aria-live': 'polite'
          }),
          children: toastRoot.renderScreenReaderContent && /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
            children: [toast.title && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              children: toast.title
            }), toast.description && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              children: toast.description
            })]
          })
        })]
      })
    }
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToastRootContext.ToastRootContext.Provider, {
    value: toastRoot,
    children: renderElement()
  });
});
process.env.NODE_ENV !== "production" ? ToastRoot.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]),
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),
  /**
   * Direction(s) in which the toast can be swiped to dismiss.
   * Defaults to `['down', 'right']`.
   */
  swipeDirection: _propTypes.default.oneOfType([_propTypes.default.oneOf(['down', 'left', 'right', 'up']), _propTypes.default.arrayOf(_propTypes.default.oneOf(['down', 'left', 'right', 'up']).isRequired)]),
  /**
   * The toast to render.
   */
  toast: _propTypes.default.shape({
    actionProps: _propTypes.default.object,
    data: _propTypes.default.any,
    description: _propTypes.default.string,
    height: _propTypes.default.number,
    id: _propTypes.default.string.isRequired,
    limited: _propTypes.default.bool,
    onClose: _propTypes.default.func,
    onRemove: _propTypes.default.func,
    priority: _propTypes.default.oneOf(['high', 'low']),
    timeout: _propTypes.default.number,
    title: _propTypes.default.string,
    transitionStatus: _propTypes.default.oneOf(['ending', 'starting']),
    type: _propTypes.default.string
  }).isRequired
} : void 0;