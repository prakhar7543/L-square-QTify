"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToastViewport = void 0;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _useForkRef = require("../../utils/useForkRef");
var _ToastViewportContext = require("./ToastViewportContext");
var _FloatingPortalLite = require("../../utils/FloatingPortalLite");
var _FocusGuard = require("./FocusGuard");
var _useToastViewport = require("./useToastViewport");
var _ToastProviderContext = require("../provider/ToastProviderContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * A container viewport for toasts.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Toast](https://base-ui.com/react/components/toast)
 */const ToastViewport = exports.ToastViewport = /*#__PURE__*/React.forwardRef(function ToastViewport(props, forwardedRef) {
  const {
    render,
    className,
    children,
    ...other
  } = props;
  const {
    hovering,
    focused,
    hasDifferingHeights
  } = (0, _ToastProviderContext.useToastContext)();
  const viewport = (0, _useToastViewport.useToastViewport)();
  const mergedRef = (0, _useForkRef.useForkRef)(viewport.viewportRef, forwardedRef);
  const state = React.useMemo(() => ({
    expanded: hovering || focused || hasDifferingHeights
  }), [hovering, focused, hasDifferingHeights]);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    render: render ?? 'div',
    ref: mergedRef,
    className,
    state,
    propGetter: viewport.getViewportProps,
    extraProps: {
      ...other,
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
        children: [viewport.numToasts > 0 && viewport.prevFocusElement && /*#__PURE__*/(0, _jsxRuntime.jsx)(_FocusGuard.FocusGuard, {
          onFocus: viewport.handleFocusGuard
        }), children, viewport.numToasts > 0 && viewport.prevFocusElement && /*#__PURE__*/(0, _jsxRuntime.jsx)(_FocusGuard.FocusGuard, {
          onFocus: viewport.handleFocusGuard
        })]
      })
    }
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToastViewportContext.ToastViewportContext.Provider, {
    value: viewport.contextValue,
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_FloatingPortalLite.FloatingPortalLite, {
      children: [viewport.numToasts > 0 && viewport.prevFocusElement && /*#__PURE__*/(0, _jsxRuntime.jsx)(_FocusGuard.FocusGuard, {
        onFocus: viewport.handleFocusGuard
      }), renderElement()]
    })
  });
});
process.env.NODE_ENV !== "production" ? ToastViewport.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]),
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func])
} : void 0;