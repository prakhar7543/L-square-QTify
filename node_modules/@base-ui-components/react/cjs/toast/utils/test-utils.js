"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = Button;
exports.List = List;
var React = _interopRequireWildcard(require("react"));
var _toast = require("@base-ui-components/react/toast");
var _jsxRuntime = require("react/jsx-runtime");
var _Toast$Title, _Toast$Description, _Toast$Close, _Toast$Action;
/**
 * @internal
 */
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function Button() {
  const {
    add
  } = _toast.Toast.useToastManager();
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
    type: "button",
    onClick: () => {
      add({
        title: 'title',
        description: 'description',
        actionProps: {
          id: 'action',
          children: 'action'
        }
      });
    },
    children: "add"
  });
}

/**
 * @internal
 */
function List() {
  return _toast.Toast.useToastManager().toasts.map(toastItem => /*#__PURE__*/(0, _jsxRuntime.jsxs)(_toast.Toast.Root, {
    toast: toastItem,
    "data-testid": "root",
    children: [_Toast$Title || (_Toast$Title = /*#__PURE__*/(0, _jsxRuntime.jsx)(_toast.Toast.Title, {
      "data-testid": "title"
    })), _Toast$Description || (_Toast$Description = /*#__PURE__*/(0, _jsxRuntime.jsx)(_toast.Toast.Description, {
      "data-testid": "description"
    })), _Toast$Close || (_Toast$Close = /*#__PURE__*/(0, _jsxRuntime.jsx)(_toast.Toast.Close, {
      "aria-label": "close-button"
    })), _Toast$Action || (_Toast$Action = /*#__PURE__*/(0, _jsxRuntime.jsx)(_toast.Toast.Action, {
      "data-testid": "action"
    }))]
  }, toastItem.id));
}