"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePanelResize = usePanelResize;
var React = _interopRequireWildcard(require("react"));
var _owner = require("./owner");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function setAutoSize(panel) {
  const originalHeight = panel.style.height;
  const originalWidth = panel.style.width;
  panel.style.height = 'auto';
  panel.style.width = 'auto';
  return () => {
    panel.style.height = originalHeight;
    panel.style.width = originalWidth;
  };
}

/**
 * Ensures the panel will expand to the correct height when the window is resized.
 * This prevents content from being cut off or the panel not fitting to the content.
 */
function usePanelResize(panelRef, setDimensions, open) {
  React.useEffect(() => {
    const panel = panelRef.current;
    if (!panel || !open || typeof ResizeObserver === 'undefined') {
      return undefined;
    }
    function recalculateSize() {
      if (!panel) {
        return;
      }
      const cleanup = setAutoSize(panel);
      const scrollHeight = panel.scrollHeight;
      const scrollWidth = panel.scrollWidth;
      cleanup();
      setDimensions(prev => {
        if (prev.height !== scrollHeight || prev.width !== scrollWidth) {
          return {
            height: scrollHeight,
            width: scrollWidth
          };
        }
        return prev;
      });
    }
    const observer = new ResizeObserver(() => {
      if (panel.getAnimations().length > 0) {
        return;
      }
      recalculateSize();
    });
    function handleWindowResize() {
      recalculateSize();
    }
    const win = (0, _owner.ownerWindow)(panel);
    win.addEventListener('resize', handleWindowResize);
    observer.observe(panel);
    return () => {
      observer.disconnect();
      win.removeEventListener('resize', handleWindowResize);
    };
  }, [panelRef, setDimensions, open]);
}