"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRenderElement = useRenderElement;
var React = _interopRequireWildcard(require("react"));
var _getStyleHookProps = require("./getStyleHookProps");
var _resolveClassName = require("./resolveClassName");
var _evaluateRenderProp = require("./evaluateRenderProp");
var _useRenderPropForkRef = require("./useRenderPropForkRef");
var _mergeProps = require("../merge-props");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function tag(Tag) {
  return function render(props) {
    if (Tag === 'button') {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        type: "button",
        ...props
      });
    }
    if (Tag === 'img') {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
        alt: "",
        ...props
      });
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Tag, {
      ...props
    });
  };
}
const emptyObject = {};

/**
 * Returns a function that renders a Base UI element.
 */
function useRenderElement(element, componentProps, params = {}) {
  const {
    className: classNameProp,
    render: renderProp
  } = componentProps;
  const {
    propGetter = props => props,
    state = emptyObject,
    ref,
    props,
    customStyleHookMapping,
    styleHooks: generateStyleHooks = true
  } = params;
  const render = renderProp || (typeof element === 'string' ? tag(element) : element);
  const className = (0, _resolveClassName.resolveClassName)(classNameProp, state);
  const styleHooks = React.useMemo(() => {
    if (!generateStyleHooks) {
      return emptyObject;
    }
    return (0, _getStyleHookProps.getStyleHookProps)(state, customStyleHookMapping);
  }, [state, customStyleHookMapping, generateStyleHooks]);
  const ownProps = propGetter({
    ...styleHooks,
    ...(Array.isArray(props) ? (0, _mergeProps.mergeProps)(...props) : props)
  });
  let refs = [];
  if (ref !== undefined) {
    refs = Array.isArray(ref) ? ref : [ref];
  }
  const propsWithRef = {
    ...ownProps,
    ref: (0, _useRenderPropForkRef.useRenderPropForkRef)(render, ownProps.ref, ...refs)
  };
  if (className !== undefined) {
    propsWithRef.className = className;
  }
  return () => (0, _evaluateRenderProp.evaluateRenderProp)(render, propsWithRef, state);
}