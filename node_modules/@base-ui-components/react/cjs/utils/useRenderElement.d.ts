import * as React from 'react';
import type { ComponentRenderFn, GenericHTMLProps } from './types.js';
import { CustomStyleHookMapping } from './getStyleHookProps.js';
/**
 * Returns a function that renders a Base UI element.
 */
export declare function useRenderElement<State extends Record<string, any>, RenderedElementType extends Element>(element: keyof React.JSX.IntrinsicElements | undefined, componentProps: useRenderElement.ComponentProps<State>, params?: useRenderElement.Parameters<State, RenderedElementType>): () => React.ReactElement<Record<string, unknown>, string | React.JSXElementConstructor<any>>;
export declare namespace useRenderElement {
    interface Parameters<State, RenderedElementType extends Element> {
        /**
         * @deprecated
         */
        propGetter?: (externalProps: GenericHTMLProps) => GenericHTMLProps;
        /**
         * The state of the component.
         */
        state?: State;
        /**
         * The ref to apply to the rendered element.
         */
        ref?: React.Ref<RenderedElementType> | React.Ref<RenderedElementType>[];
        /**
         * Intrinsic props to be spread on the rendered element.
         */
        props?: GenericHTMLProps | Array<GenericHTMLProps | ((props: GenericHTMLProps) => GenericHTMLProps)>;
        /**
         * A mapping of state to style hooks.
         */
        customStyleHookMapping?: CustomStyleHookMapping<State>;
        /**
         * If true, style hooks are generated.
         */
        styleHooks?: boolean;
    }
    interface ComponentProps<State> {
        /**
         * The class name to apply to the rendered element.
         * Can be a string or a function that accepts the state and returns a string.
         */
        className?: string | ((state: State) => string);
        /**
         * The render prop or React element to override the default element.
         */
        render?: undefined | ComponentRenderFn<React.HTMLAttributes<any>, State> | React.ReactElement<Record<string, unknown>>;
    }
}
