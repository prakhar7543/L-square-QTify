'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { useToastRootContext } from '../root/ToastRootContext.js';
import { mergeProps } from '../../merge-props/index.js';
import { useToastContext } from '../provider/ToastProviderContext.js';
import { useButton } from '../../use-button/useButton.js';

/**
 * Closes the toast when clicked.
 * Renders a `<button>` element.
 *
 * Documentation: [Base UI Toast](https://base-ui.com/react/components/toast)
 */
const ToastClose = /*#__PURE__*/React.forwardRef(function ToastClose(props, forwardedRef) {
  const {
    render,
    className,
    disabled,
    ...other
  } = props;
  const {
    close
  } = useToastContext();
  const {
    toast
  } = useToastRootContext();
  const {
    getButtonProps
  } = useButton({
    disabled,
    buttonRef: forwardedRef
  });
  const state = React.useMemo(() => ({
    type: toast.type
  }), [toast.type]);
  const {
    renderElement
  } = useComponentRenderer({
    render: render ?? 'button',
    ref: forwardedRef,
    className,
    state,
    extraProps: mergeProps({
      onClick() {
        close(toast.id);
      }
    }, other, getButtonProps)
  });
  return renderElement();
});
process.env.NODE_ENV !== "production" ? ToastClose.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * @ignore
   */
  disabled: PropTypes.bool,
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])
} : void 0;
export { ToastClose };