import * as React from 'react';
import PropTypes from 'prop-types';
import { isSafari } from '@floating-ui/react/utils';
import { useEnhancedEffect } from '../../utils/useEnhancedEffect.js';
import { visuallyHidden } from '../../utils/visuallyHidden.js';

/**
 * @internal
 */
import { jsx as _jsx } from "react/jsx-runtime";
const FocusGuard = /*#__PURE__*/React.forwardRef(function FocusGuard(props, ref) {
  const [role, setRole] = React.useState();
  useEnhancedEffect(() => {
    if (isSafari()) {
      // Unlike other screen readers such as NVDA and JAWS, the virtual cursor
      // on VoiceOver does trigger the onFocus event, so we can use the focus
      // trap element. On Safari, only buttons trigger the onFocus event.
      setRole('button');
    }
  }, []);
  const restProps = {
    ref,
    tabIndex: 0,
    // Role is only for VoiceOver
    role,
    'aria-hidden': role ? undefined : true,
    style: visuallyHidden
  };
  return /*#__PURE__*/_jsx("span", {
    ...props,
    ...restProps
  });
});
process.env.NODE_ENV !== "production" ? FocusGuard.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * @ignore
   */
  className: PropTypes.string
} : void 0;
export { FocusGuard };