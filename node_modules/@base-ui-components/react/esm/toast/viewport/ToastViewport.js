'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { useForkRef } from '../../utils/useForkRef.js';
import { ToastViewportContext } from './ToastViewportContext.js';
import { FloatingPortalLite } from '../../utils/FloatingPortalLite.js';
import { FocusGuard } from './FocusGuard.js';
import { useToastViewport } from './useToastViewport.js';
import { useToastContext } from '../provider/ToastProviderContext.js';

/**
 * A container viewport for toasts.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Toast](https://base-ui.com/react/components/toast)
 */
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const ToastViewport = /*#__PURE__*/React.forwardRef(function ToastViewport(props, forwardedRef) {
  const {
    render,
    className,
    children,
    ...other
  } = props;
  const {
    hovering,
    focused,
    hasDifferingHeights
  } = useToastContext();
  const viewport = useToastViewport();
  const mergedRef = useForkRef(viewport.viewportRef, forwardedRef);
  const state = React.useMemo(() => ({
    expanded: hovering || focused || hasDifferingHeights
  }), [hovering, focused, hasDifferingHeights]);
  const {
    renderElement
  } = useComponentRenderer({
    render: render ?? 'div',
    ref: mergedRef,
    className,
    state,
    propGetter: viewport.getViewportProps,
    extraProps: {
      ...other,
      children: /*#__PURE__*/_jsxs(React.Fragment, {
        children: [viewport.numToasts > 0 && viewport.prevFocusElement && /*#__PURE__*/_jsx(FocusGuard, {
          onFocus: viewport.handleFocusGuard
        }), children, viewport.numToasts > 0 && viewport.prevFocusElement && /*#__PURE__*/_jsx(FocusGuard, {
          onFocus: viewport.handleFocusGuard
        })]
      })
    }
  });
  return /*#__PURE__*/_jsx(ToastViewportContext.Provider, {
    value: viewport.contextValue,
    children: /*#__PURE__*/_jsxs(FloatingPortalLite, {
      children: [viewport.numToasts > 0 && viewport.prevFocusElement && /*#__PURE__*/_jsx(FocusGuard, {
        onFocus: viewport.handleFocusGuard
      }), renderElement()]
    })
  });
});
process.env.NODE_ENV !== "production" ? ToastViewport.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])
} : void 0;
export { ToastViewport };