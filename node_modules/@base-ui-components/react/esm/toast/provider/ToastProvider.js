'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { ToastContext } from './ToastProviderContext.js';
import { useToastProvider } from './useToastProvider.js';

/**
 * Provides a context for creating and managing toasts.
 *
 * Documentation: [Base UI Toast](https://base-ui.com/react/components/toast)
 */
import { jsx as _jsx } from "react/jsx-runtime";
const ToastProvider = function ToastProvider(props) {
  const {
    children,
    timeout = 5000,
    limit = 3,
    toastManager
  } = props;
  const contextValue = useToastProvider({
    timeout,
    limit,
    toastManager
  });
  return /*#__PURE__*/_jsx(ToastContext.Provider, {
    value: contextValue,
    children: children
  });
};
process.env.NODE_ENV !== "production" ? ToastProvider.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * The maximum number of toasts that can be displayed at once.
   * When the limit is reached, the oldest toast will be removed to make room for the new one.
   * @default 3
   */
  limit: PropTypes.number,
  /**
   * The default amount of time (in ms) before a toast is auto dismissed.
   * A value of `0` will prevent the toast from being dismissed automatically.
   * @default 5000
   */
  timeout: PropTypes.number,
  /**
   * A global manager for toasts to use outside of a React component.
   */
  toastManager: PropTypes.shape({
    ' subscribe': PropTypes.func.isRequired,
    add: PropTypes.func.isRequired,
    promise: PropTypes.func.isRequired,
    remove: PropTypes.func.isRequired,
    update: PropTypes.func.isRequired
  })
} : void 0;
export { ToastProvider };