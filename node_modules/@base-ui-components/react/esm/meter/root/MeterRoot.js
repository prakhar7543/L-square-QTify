'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { MeterRootContext } from './MeterRootContext.js';
import { mergeProps } from '../../merge-props/index.js';
import { formatNumber } from '../../utils/formatNumber.js';
import { useLatestRef } from '../../utils/useLatestRef.js';
import { valueToPercent } from '../../utils/valueToPercent.js';
import { jsx as _jsx } from "react/jsx-runtime";
const EMPTY = {};
function formatValue(value, locale, format) {
  if (!format) {
    return formatNumber(value / 100, locale, {
      style: 'percent'
    });
  }
  return formatNumber(value, locale, format);
}
/**
 * Groups all parts of the meter and provides the value for screen readers.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Meter](https://base-ui.com/react/components/meter)
 */
const MeterRoot = /*#__PURE__*/React.forwardRef(function MeterRoot(props, forwardedRef) {
  const {
    format,
    getAriaValueText,
    locale,
    max = 100,
    min = 0,
    value,
    render,
    className,
    ...otherProps
  } = props;
  const formatOptionsRef = useLatestRef(format);
  const [labelId, setLabelId] = React.useState();
  const percentageValue = valueToPercent(value, min, max);
  const formattedValue = formatValue(value, locale, formatOptionsRef.current);
  const propGetter = React.useCallback((externalProps = {}) => {
    let ariaValuetext = `${percentageValue}%`;
    if (getAriaValueText) {
      ariaValuetext = getAriaValueText(formattedValue, value);
    } else if (format) {
      ariaValuetext = formattedValue;
    }
    return mergeProps({
      'aria-labelledby': labelId,
      'aria-valuemax': max,
      'aria-valuemin': min,
      'aria-valuenow': percentageValue / 100,
      'aria-valuetext': ariaValuetext,
      role: 'meter'
    }, externalProps);
  }, [format, formattedValue, getAriaValueText, labelId, max, min, value, percentageValue]);
  const contextValue = React.useMemo(() => ({
    formattedValue,
    max,
    min,
    percentageValue,
    setLabelId,
    value
  }), [formattedValue, max, min, percentageValue, setLabelId, value]);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter,
    render: render ?? 'div',
    state: EMPTY,
    className,
    ref: forwardedRef,
    extraProps: otherProps
  });
  return /*#__PURE__*/_jsx(MeterRootContext.Provider, {
    value: contextValue,
    children: renderElement()
  });
});
export { MeterRoot };
process.env.NODE_ENV !== "production" ? MeterRoot.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * Options to format the value.
   */
  format: PropTypes.shape({
    compactDisplay: PropTypes.oneOf(['long', 'short']),
    currency: PropTypes.string,
    currencyDisplay: PropTypes.oneOf(['code', 'name', 'narrowSymbol', 'symbol']),
    currencySign: PropTypes.oneOf(['accounting', 'standard']),
    localeMatcher: PropTypes.oneOf(['best fit', 'lookup']),
    maximumFractionDigits: PropTypes.number,
    maximumSignificantDigits: PropTypes.number,
    minimumFractionDigits: PropTypes.number,
    minimumIntegerDigits: PropTypes.number,
    minimumSignificantDigits: PropTypes.number,
    notation: PropTypes.oneOf(['compact', 'engineering', 'scientific', 'standard']),
    numberingSystem: PropTypes.string,
    signDisplay: PropTypes.oneOf(['always', 'auto', 'exceptZero', 'never']),
    style: PropTypes.oneOf(['currency', 'decimal', 'percent', 'unit']),
    unit: PropTypes.string,
    unitDisplay: PropTypes.oneOf(['long', 'narrow', 'short']),
    useGrouping: PropTypes.bool
  }),
  /**
   * A function that returns a string value that provides a human-readable text alternative for the current value of the meter.
   * @param {string} formattedValue The formatted value
   * @param {number} value The raw value
   * @returns {string}
   */
  getAriaValueText: PropTypes.func,
  /**
   * The locale used by `Intl.NumberFormat` when formatting the value.
   * Defaults to the user's runtime locale.
   */
  locale: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({
    baseName: PropTypes.string.isRequired,
    calendar: PropTypes.string,
    caseFirst: PropTypes.oneOf(['false', 'lower', 'upper']),
    collation: PropTypes.string,
    hourCycle: PropTypes.oneOf(['h11', 'h12', 'h23', 'h24']),
    language: PropTypes.string.isRequired,
    maximize: PropTypes.func.isRequired,
    minimize: PropTypes.func.isRequired,
    numberingSystem: PropTypes.string,
    numeric: PropTypes.bool,
    region: PropTypes.string,
    script: PropTypes.string,
    toString: PropTypes.func.isRequired
  }), PropTypes.string]).isRequired), PropTypes.shape({
    baseName: PropTypes.string.isRequired,
    calendar: PropTypes.string,
    caseFirst: PropTypes.oneOf(['false', 'lower', 'upper']),
    collation: PropTypes.string,
    hourCycle: PropTypes.oneOf(['h11', 'h12', 'h23', 'h24']),
    language: PropTypes.string.isRequired,
    maximize: PropTypes.func.isRequired,
    minimize: PropTypes.func.isRequired,
    numberingSystem: PropTypes.string,
    numeric: PropTypes.bool,
    region: PropTypes.string,
    script: PropTypes.string,
    toString: PropTypes.func.isRequired
  }), PropTypes.string]),
  /**
   * The maximum value
   * @default 100
   */
  max: PropTypes.number,
  /**
   * The minimum value
   * @default 0
   */
  min: PropTypes.number,
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),
  /**
   * The current value.
   */
  value: PropTypes.number.isRequired
} : void 0;