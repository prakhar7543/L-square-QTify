'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { mergeProps } from '../../merge-props/index.js';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { useMeterRootContext } from '../root/MeterRootContext.js';
const EMPTY = {};
/**
 * A text element displaying the current value.
 * Renders a `<span>` element.
 *
 * Documentation: [Base UI Meter](https://base-ui.com/react/components/meter)
 */
const MeterValue = /*#__PURE__*/React.forwardRef(function MeterValue(props, forwardedRef) {
  const {
    className,
    render,
    children,
    ...otherProps
  } = props;
  const {
    value,
    formattedValue
  } = useMeterRootContext();
  const getValueProps = React.useCallback((externalProps = {}) => mergeProps({
    'aria-hidden': true,
    children: typeof children === 'function' ? children(formattedValue, value) : (formattedValue || value) ?? ''
  }, externalProps), [children, value, formattedValue]);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: getValueProps,
    render: render ?? 'span',
    className,
    state: EMPTY,
    ref: forwardedRef,
    extraProps: otherProps
  });
  return renderElement();
});
export { MeterValue };
process.env.NODE_ENV !== "production" ? MeterValue.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.func,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])
} : void 0;