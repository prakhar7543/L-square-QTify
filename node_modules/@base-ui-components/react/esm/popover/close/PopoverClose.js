'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { usePopoverRootContext } from '../root/PopoverRootContext.js';
import { useRenderElement } from '../../utils/useRenderElement.js';

/**
 * A button that closes the popover.
 * Renders a `<button>` element.
 *
 * Documentation: [Base UI Popover](https://base-ui.com/react/components/popover)
 */
const PopoverClose = /*#__PURE__*/React.forwardRef(function PopoverClose(props, forwardedRef) {
  const {
    render,
    className,
    ...elementProps
  } = props;
  const {
    setOpen
  } = usePopoverRootContext();
  const renderElement = useRenderElement('button', props, {
    ref: forwardedRef,
    props: [{
      onClick() {
        setOpen(false, undefined, undefined);
      }
    }, elementProps]
  });
  return renderElement();
});
process.env.NODE_ENV !== "production" ? PopoverClose.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])
} : void 0;
export { PopoverClose };