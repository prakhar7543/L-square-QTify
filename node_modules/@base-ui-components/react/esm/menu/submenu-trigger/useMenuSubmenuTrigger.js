'use client';

import * as React from 'react';
import { useMenuItem } from '../item/useMenuItem.js';
import { useForkRef } from '../../utils/useForkRef.js';
import { useMenuRootContext } from '../root/MenuRootContext.js';
export function useMenuSubmenuTrigger(parameters) {
  const {
    id,
    highlighted,
    disabled,
    ref: externalRef,
    menuEvents,
    setTriggerElement,
    allowMouseUpTriggerRef,
    typingRef,
    setActiveIndex
  } = parameters;
  const {
    open
  } = useMenuRootContext();
  const {
    getItemProps,
    rootRef: menuItemRef
  } = useMenuItem({
    closeOnClick: false,
    disabled,
    highlighted,
    id,
    menuEvents,
    ref: externalRef,
    allowMouseUpTriggerRef,
    typingRef
  });
  const triggerRef = React.useRef(null);
  const menuTriggerRef = useForkRef(triggerRef, menuItemRef, setTriggerElement);
  const getTriggerProps = React.useCallback(externalProps => {
    return {
      ...getItemProps(externalProps),
      tabIndex: open || highlighted ? 0 : -1,
      ref: menuTriggerRef,
      onBlur() {
        if (highlighted) {
          setActiveIndex(null);
        }
      }
    };
  }, [getItemProps, highlighted, menuTriggerRef, open, setActiveIndex]);
  return React.useMemo(() => ({
    getTriggerProps,
    rootRef: menuTriggerRef
  }), [getTriggerProps, menuTriggerRef]);
}