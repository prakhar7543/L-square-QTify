import * as React from 'react';
import { getStyleHookProps } from './getStyleHookProps.js';
import { resolveClassName } from './resolveClassName.js';
import { evaluateRenderProp } from './evaluateRenderProp.js';
import { useRenderPropForkRef } from './useRenderPropForkRef.js';
import { mergeProps } from '../merge-props/index.js';
import { jsx as _jsx } from "react/jsx-runtime";
function tag(Tag) {
  return function render(props) {
    if (Tag === 'button') {
      return /*#__PURE__*/_jsx("button", {
        type: "button",
        ...props
      });
    }
    if (Tag === 'img') {
      return /*#__PURE__*/_jsx("img", {
        alt: "",
        ...props
      });
    }
    return /*#__PURE__*/_jsx(Tag, {
      ...props
    });
  };
}
const emptyObject = {};

/**
 * Returns a function that renders a Base UI element.
 */
export function useRenderElement(element, componentProps, params = {}) {
  const {
    className: classNameProp,
    render: renderProp
  } = componentProps;
  const {
    propGetter = props => props,
    state = emptyObject,
    ref,
    props,
    customStyleHookMapping,
    styleHooks: generateStyleHooks = true
  } = params;
  const render = renderProp || (typeof element === 'string' ? tag(element) : element);
  const className = resolveClassName(classNameProp, state);
  const styleHooks = React.useMemo(() => {
    if (!generateStyleHooks) {
      return emptyObject;
    }
    return getStyleHookProps(state, customStyleHookMapping);
  }, [state, customStyleHookMapping, generateStyleHooks]);
  const ownProps = propGetter({
    ...styleHooks,
    ...(Array.isArray(props) ? mergeProps(...props) : props)
  });
  let refs = [];
  if (ref !== undefined) {
    refs = Array.isArray(ref) ? ref : [ref];
  }
  const propsWithRef = {
    ...ownProps,
    ref: useRenderPropForkRef(render, ownProps.ref, ...refs)
  };
  if (className !== undefined) {
    propsWithRef.className = className;
  }
  return () => evaluateRenderProp(render, propsWithRef, state);
}